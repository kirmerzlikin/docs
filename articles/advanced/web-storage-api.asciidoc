---
title: Web Storage API
description: Using Web Storage from the server side.
order: 760
---


= Web Storage API
:toc:

The [interfacename]`WebStorage` API allows you to access the https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API[browser Web Storage]
from the server side. Web Storage is a standard JavaScript API to store
string-only key and value pairs in the browser's device. Data is persisted
only in the browser's device.

[classname]`WebStorage.Storage` defines two types of storage: local storage and
session storage.

[NOTE]
[interfacename]`WebStorage` uses `UI.getCurrent()` by default to get target
UI instance. All methods have also variant with a parameter for UI instance.
UI instance argument shouldn't be null and this should be noted especially when
calling method outside the main thread.

== Local Storage

Local storage data is stored per origin (combination of protocol, host,
and port) with no expiration date.

Shortcuts: [methodname]`setItem(String, String)`,
[methodname]`removeItem(String)`, and
[methodname]`clear()`.

[source,java]
----
// set key and value pair to local storage
WebStorage.setItem("key", "value");
----

== Session Storage

Session storage data is stored per origin and browser page session (browser
window or tab). Storage is cleared when window or tab is closed.

[NOTE]
Session storage term comes from the `Window.sessionStorage` Web Storage
JavaScript API. It's not directly affected by lifecycle of Vaadin session or
HTTP session in general.

== Setting key and value pair

Set key and value pair in to the storage with
[methodname]`setItem(Storage, String, String)`.
[source,java]
----
// set key and value pair to local storage
WebStorage.setItem(Storage.LOCAL_STORAGE, "key", "value");
----

== Removing key and value pair

Remove key and value pair from the storage with
[methodname]`removeItem(Storage, String)`.
[source,java]
----
// remove key and value pair from the session storage
WebStorage.removeItem(Storage.SESSION_STORAGE, "key");
----

== Clearing storage

Clear storage with [methodname]`clear(Storage)`.
[source,java]
----
WebStorage.clear(Storage.SESSION_STORAGE);
----

== Getting value from the storage

Request value from the storage by a key and process returned value with
a callback with [methodname]`getItem(Storage, String, Callback)`.
[source,java]
----
// get value from the session storage by a key
WebStorage.getItem(Storage.SESSION_STORAGE, "key", value -> {
    System.out.println(value);
});
----
[NOTE]
Callback gives null value also in case of an unexpected error.

